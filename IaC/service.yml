Description: >
  Udacity Cloud DevOps Engineer Nanodegree Program - Project 1. 
  Deploy a High Availability Web App With Cloudformation.

Parameters:

  ParamJumpBoxKeyName:
    Description: JupBox access key name
    Type: String

  ParamWebApplicationKeyName:
    Description: WebApplication access key name
    Type: String

Resources:

  # Security Groups
  LoudBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP only to Load Balancer
      VpcId: !ImportValue OutputVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  
  JumBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH as ingress and keep all ports to internet access
      VpcId: !ImportValue OutputVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP only to Web Application
      VpcId: !ImportValue OutputVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # JumpBox
  JumpBoxInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0742b4e673072066f
      KeyName: !Ref ParamJumpBoxKeyName
      InstanceType: t3.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref JumBoxSecurityGroup
          SubnetId: !ImportValue OutputPublicSubnet1          
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  # Web Application Configuration
  WebApplicationLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: ami-0742b4e673072066f
      KeyName: !Ref ParamWebApplicationKeyName
      IamInstanceProfile: !ImportValue OutputProfileInstance
      SecurityGroups:
        - !Ref WebApplicationSecurityGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  # Web Application Target Group
  WebApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !ImportValue OutputVPC

  # Web Application Auto Scaling Group
  WebApplicationAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue OutputPrivateSubnet1
        - !ImportValue OutputPrivateSubnet2
      LaunchConfigurationName:
        Ref: WebApplicationLaunchConfig
      MinSize: '1'
      MaxSize: '3'
      TargetGroupARNs:
        - !Ref WebApplicationTargetGroup

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref LoudBalancerSecurityGroup
      Subnets:
        - !ImportValue OutputPublicSubnet1
        - !ImportValue OutputPublicSubnet2
